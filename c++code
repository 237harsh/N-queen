class Solution {
public:
    vector<vector<string>>an;
bool cheak(int col,int row,int n,vector<string>&board)
{
      int r1 = row;
        int c1 = col; 
        ///upper diagonal;
        while(row >= 0 && col >= 0) {
            if(board[row][col] == 'Q') return false;
            row--;
            col--;
        }
        
        //moving left in row;
        col = c1; 
        row = r1;
        while(col>=0) {
            if(board[row][col] == 'Q') return false;
            col--; 
            
        }
    
        col = c1; 
        row = r1;
        while(row<n && col>=0) {//lower diagonal;
            if(board[row][col] == 'Q') return false;
            row++;
            col--; 
        }
        
    return true;
}
   void make(int col,int n,vector<string>&board)
   {
       if(col==n)
       {
           an.push_back(board);
           return;
       }
       for(int row=0;row<n;row++)
       {
           if(cheak(col,row, n,board))
           {
               board[row][col]='Q';
               make(col+1, n,board);
               board[row][col]='.';
           }
       }
   }
    vector<vector<string>> solveNQueens(int n) {
      vector<string>board(n);
        string s(n,'.');
        for(int i=0;i<n;i++)
        {
            board[i]=s;
        }
        make(0,n,board);
        return an;
        
    }
};
